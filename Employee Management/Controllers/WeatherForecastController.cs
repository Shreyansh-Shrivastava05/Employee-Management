using Employee_Management.Model;
using Microsoft.AspNetCore.Mvc;

namespace Employee_Management.Controllers
{
    [ApiController] 
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };
        // Storing the AutoGenerated data in the list to handle the verbs like put and delete
        private static List<WeatherForecast> WeatherForecasts = new List<WeatherForecast>();
        private readonly ILogger<WeatherForecastController> _logger;
      

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IEnumerable<WeatherForecast> Get()
        {
            WeatherForecasts.Clear(); // clears the previous generated data after every refresh  
            var weatherForecast = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            { // in the above code range will start with 1 till 5
                Date = DateTime.Now.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
            WeatherForecasts.AddRange(weatherForecast); // adding the data in the list for using the verbs and returning the list
            return WeatherForecasts;
        }
    
    

        [HttpGet("getbysummary")]
        public IEnumerable<WeatherForecast> GetBySummary(string summary)
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .Where(weather => weather.Summary == summary) // LINQ method will give all the matching result to summary
            .ToArray();
        }

        [HttpPost("postsummary")]
        public IActionResult PostWeatherForecast([FromBody] string summary)
        { // When we use [FromBody], the ASP.NET Core framework attempts to deserialize the request body into the specified parameter type.
            // Check to avoid the warnings and handle error
            if (string.IsNullOrEmpty(summary))
            {
                return BadRequest("Please Entry The Summary First");
            }
            var newWeatherForecast = new WeatherForecast
            {
                Date = DateTime.Now,
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summary

            };
            Console.WriteLine(newWeatherForecast.Summary);
            return Ok(newWeatherForecast);
        }

        [HttpPut("updatesummary")]
        public IActionResult UpdateWeatherForecastSummary([FromBody] UpdateSummary request)
        {
            
           var existingWeatherForecast = WeatherForecasts.FirstOrDefault(weather => weather.Summary == request.OldSummary);

            if (existingWeatherForecast == null)
            {
                return NotFound("Summary Not Found");
            }
            existingWeatherForecast.Summary = request.NewSummary;

            return Ok(existingWeatherForecast);
            
        }

        [HttpDelete("delete")]
        public IActionResult DeleteWeatherForecast([FromBody] string summary)
        {
            if (string.IsNullOrEmpty(summary))
            {
                return BadRequest("Please Enter the Summary");
            }
            // Using the where method of LINQ instead of the FirstOrDefault method as the summary is having the same name more than once
            var deleteWeatherForecast = WeatherForecasts.Where(weather => weather.Summary == summary);

            if (deleteWeatherForecast == null)
            {
                return NotFound("Summary not found");
            }
            // storing the data before using the method remove all as it will erase the data and will get the empty array in postman
            var removed = new List<WeatherForecast>(deleteWeatherForecast);
            WeatherForecasts.RemoveAll(weather => weather.Summary == summary);
            return Ok(removed);
        }







    }
}